//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DamageField/TestInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInput"",
    ""maps"": [
        {
            ""name"": ""TestActionMap"",
            ""id"": ""25424af1-4913-4f43-9d54-4c4f39c31381"",
            ""actions"": [
                {
                    ""name"": ""Dir"",
                    ""type"": ""Value"",
                    ""id"": ""9cee49f9-14fa-4ef0-b817-d251fbbb38a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FireSkill1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5b3ad0dc-eaab-422c-a863-6ed0fb095b53"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""06124116-bcff-4a09-9197-23eac30804f8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f6e5aee9-0944-4dbe-bdb9-eb2e1384d62f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c29a46f7-bb01-4195-a48f-6277e6ff0692"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""92aab76a-2312-4c05-bb9b-5dfaf311ea7f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""864d41c0-1caf-4b8a-9f9c-84b3a3a8d6d0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""55945b2f-aabe-42d4-9ffb-ecc07846c644"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cd3bba9c-1917-4278-8d36-299b9625dfb1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""34668e71-5ed8-4379-a804-a2d5c252dafa"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""efafb2a5-b8a2-4a2c-8e97-8826473858f0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7efd5858-2b0e-4c39-88e3-3466f78c076c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3f2b3e09-af46-4994-a646-0186ab6b660b"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""FireSkill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TestActionMap
        m_TestActionMap = asset.FindActionMap("TestActionMap", throwIfNotFound: true);
        m_TestActionMap_Dir = m_TestActionMap.FindAction("Dir", throwIfNotFound: true);
        m_TestActionMap_FireSkill1 = m_TestActionMap.FindAction("FireSkill1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TestActionMap
    private readonly InputActionMap m_TestActionMap;
    private List<ITestActionMapActions> m_TestActionMapActionsCallbackInterfaces = new List<ITestActionMapActions>();
    private readonly InputAction m_TestActionMap_Dir;
    private readonly InputAction m_TestActionMap_FireSkill1;
    public struct TestActionMapActions
    {
        private @TestInput m_Wrapper;
        public TestActionMapActions(@TestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dir => m_Wrapper.m_TestActionMap_Dir;
        public InputAction @FireSkill1 => m_Wrapper.m_TestActionMap_FireSkill1;
        public InputActionMap Get() { return m_Wrapper.m_TestActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActionMapActions set) { return set.Get(); }
        public void AddCallbacks(ITestActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionMapActionsCallbackInterfaces.Add(instance);
            @Dir.started += instance.OnDir;
            @Dir.performed += instance.OnDir;
            @Dir.canceled += instance.OnDir;
            @FireSkill1.started += instance.OnFireSkill1;
            @FireSkill1.performed += instance.OnFireSkill1;
            @FireSkill1.canceled += instance.OnFireSkill1;
        }

        private void UnregisterCallbacks(ITestActionMapActions instance)
        {
            @Dir.started -= instance.OnDir;
            @Dir.performed -= instance.OnDir;
            @Dir.canceled -= instance.OnDir;
            @FireSkill1.started -= instance.OnFireSkill1;
            @FireSkill1.performed -= instance.OnFireSkill1;
            @FireSkill1.canceled -= instance.OnFireSkill1;
        }

        public void RemoveCallbacks(ITestActionMapActions instance)
        {
            if (m_Wrapper.m_TestActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActionMapActions @TestActionMap => new TestActionMapActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface ITestActionMapActions
    {
        void OnDir(InputAction.CallbackContext context);
        void OnFireSkill1(InputAction.CallbackContext context);
    }
}
